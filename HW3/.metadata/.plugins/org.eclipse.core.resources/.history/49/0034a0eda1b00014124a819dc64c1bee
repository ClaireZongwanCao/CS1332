import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class BST<T extends Comparable<? super T>> implements BSTInterface<T> {
	private BSTNode<T> root;
	private int size;

	/**
	 * A no argument constructor that should initialize an empty BST
	 */
	public BST() {

	}

	/**
	 * Initializes the BST with the data in the collection. The data in the BST
	 * should be added in the same order it is in the collection.
	 *
	 * @param data
	 *            the data to add to the tree
	 * @throws IllegalArgumentException
	 *             if data or any element in data is null
	 */
	public BST(Collection<T> data) {
		if (data == null) {
			throw new IllegalArgumentException();
		}
		for (T d : data) {
			if (d == null) {
				throw new IllegalArgumentException();
			}
			add(d);
		}
	}

	@Override
	public void add(T data) {
		checkdata(data);
		if (root == null) {
			root = new BSTNode<T> (data);
		}
		else add(data, root);
	}

	private void add(T data, BSTNode<T> current) {
		if (data.compareTo(current.getData()) < 0) {
			if (current.getLeft() == null) {
				BSTNode<T> temp = new BSTNode<T> (data);
				current.setLeft(temp);
			}
			else add(data, current.getLeft());
			size++;
		}
		else if (data.compareTo(current.getData()) > 0) {
			if (current.getRight() == null) {
				BSTNode<T> temp = new BSTNode<T> (data);
				current.setRight(temp);
			}
			else add(data, current.getRight());
			size++;
		}
	}
	@Override
	public T remove(T data) {
		checkdata(data);
		BSTNode<T> parent = searchtree(root, null, data);
		BSTNode<T> current;
		if (parent == null) {
			current = root;
		} else {
			current = ((parent.getLeft() != null && parent.getLeft().getData() == data) ? parent.getLeft()
					: parent.getRight());
		
		};
		
		T res = current.getData();
		if ((current.getLeft() == null) && (current.getRight() == null)) {
			if (current == root) {
				root = null;
			}
			else if (parent.getLeft() == current) {
					parent.setLeft(null);
			}
			else parent.setRight(null);
		} 
		else if ((current.getLeft() != null) && (current.getRight() != null)) {
			BSTNode<T> replace = current.getRight();
			BSTNode<T> replaceparent = current;
			while (replace.getLeft() != null) {
				replaceparent = replace;
				replace = replace.getLeft();
			}
			current.setData(replace.getData());
			if (current == replaceparent) {
				replaceparent.setRight(replace.getRight());
			}
			else replaceparent.setLeft(replace.getRight());
			replace.setRight(null);
		} 
		else {
			if (current.getLeft() == null) {
				if (current == root) {
					root = current.getRight();
				}
				else if (parent.getRight() == current) {
						parent.setRight(current.getRight());
				} 
				else
					parent.setLeft(current.getRight());
			} 
			else {
				if (current == root) {
					root = current.getLeft();
				}
				else if (parent.getRight() == current) {
					parent.setRight(current.getLeft());
				} 
				else
					parent.setLeft(current.getLeft());
			}
		}
		size--;
		return res;
	}

	private BSTNode<T> searchtree(BSTNode<T> current, BSTNode<T> parent, T data) {
		if (current == null) {
			throw new java.util.NoSuchElementException();
		}
		if (data.compareTo(current.getData()) == 0) {
			return parent;
		} else if (data.compareTo(current.getData()) < 0) {
			return searchtree(current.getLeft(), current, data);
		} else
			return searchtree(current.getRight(), current, data);
	}

	private void checkdata(T data) {
		if (data == null) {
			throw new IllegalArgumentException();
		}
	}

	@Override
	public T get(T data) {
		checkdata(data);
		BSTNode<T> current = root;
		while (current != null) {
			if (data.compareTo(current.getData()) < 0) {
				current = current.getLeft();
			} else if (data.compareTo(current.getData()) > 0) {
				current = current.getRight();
			} else
				return current.getData();
		}
		throw new java.util.NoSuchElementException();
	}

	@Override
	public boolean contains(T data) {
		checkdata(data);
		BSTNode<T> current = root;
		while (current != null) {
			if (data.compareTo(current.getData()) < 0) {
				current = current.getLeft();
			} else if (data.compareTo(current.getData()) > 0) {
				current = current.getRight();
			} else
				return true;
		}
		return false;
	}

	@Override
	public int size() {
		return size;
	}

	@Override
	public List<T> preorder() {
		List<T> snapshot = new ArrayList<T>();
		preordersubtree(root, snapshot);
		return snapshot;
	}

	private void preordersubtree(BSTNode<T> n, List<T> snapshot) {
		if (n != null) {
			snapshot.add(n.getData());
			preordersubtree(n.getLeft(), snapshot);
			preordersubtree(n.getRight(), snapshot);
		}
	}

	private List<BSTNode<T>> children(BSTNode<T> n) {
		List<BSTNode<T>> snapshot = new ArrayList<BSTNode<T>>();
		if (n.getLeft() != null) {
			snapshot.add(n.getLeft());
		}
		if (n.getRight() != null) {
			snapshot.add(n.getRight());
		}
		return snapshot;
	}

	@Override
	public List<T> postorder() {
		List<T> snapshot = new ArrayList<T>();
		postordersubtree(root, snapshot);
		return snapshot;
	}

	private void postordersubtree(BSTNode<T> n, List<T> snapshot) {
		if (n != null) {
			postordersubtree(n.getLeft(), snapshot);
			postordersubtree(n.getRight(), snapshot);
			snapshot.add(n.getData());
		}
	}

	@Override
	public List<T> inorder() {
		List<T> snapshot = new ArrayList<T>();
		inordersubtree(root, snapshot);
		return snapshot;
	}

	private void inordersubtree(BSTNode<T> n, List<T> snapshot) {
		if (n != null) {
			inordersubtree(n.getLeft(), snapshot);
			snapshot.add(n.getData());
			inordersubtree(n.getRight(), snapshot);
		}
	}

	@Override
	public List<T> levelorder() {
		List<T> snapshot = new ArrayList<T>();
		if (root != null) {
			Queue<BSTNode<T>> fringe = new LinkedList<BSTNode<T>>();
			fringe.add(root);
			while (!fringe.isEmpty()) {
				BSTNode<T> n = fringe.remove();
				snapshot.add(n.getData());
				for (BSTNode<T> a : children(n))
					fringe.add(a);
			}
		}
		return snapshot;
	}

	@Override
	public void clear() {
		root = null;
		size = 0;
	}

	@Override
	public int height() {
		if (root == null) {
			return -1;
		}
		return height(root);
	}

	private int height(BSTNode<T> n) {
		if (n == null)
			return -1;
		else
			return Math.max(height(n.getLeft()), height(n.getRight())) + 1;
	}

	@Override
	public int depth(T data) {
		checkdata(data);
		return depth(data, root);
	}

	private int depth(T data, BSTNode<T> n) {
		int h = 1;
		while ((n != null) && (data.compareTo(n.getData()) != 0)) {
			if (data.compareTo(n.getData()) < 0) {
				n = n.getLeft();
				h++;
			} else {
				n = n.getRight();
				h++;
			}
		}
		if (n == null) {
			return -1;
		} else
			return h;
	}

	/**
	 * THIS METHOD IS ONLY FOR TESTING PURPOSES. DO NOT USE IT IN YOUR CODE DO
	 * NOT CHANGE THIS METHOD
	 *
	 * @return the root of the tree
	 */
	public BSTNode<T> getRoot() {
		return root;
	}
}

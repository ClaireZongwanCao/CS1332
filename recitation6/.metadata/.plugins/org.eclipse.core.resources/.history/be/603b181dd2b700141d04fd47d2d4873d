import java.util.HashSet;
import java.util.Set;

/**
 * Class for implementing your HashMap with external chaining
 *
 * Created by CS1332TAs on 2/11/15.
 */
public class HashMap<K,V> implements HashMapInterface<K,V> {
    private MapEntry<K, V>[] backing;
    private int size;

    public HashMap() {
        this.backing = (MapEntry<K, V>[]) new MapEntry[STARTING_SIZE];
        size = 0;
    }

    @Override
    public void add(K key, V value) {
    	MapEntry<K, V> entry = new MapEntry(key, value);
    	int index;
    	if ((key == null) || (value == null)) {
    		throw new IllegalArgumentException();
    	}
    	if (size >= backing.length * MAX_LOAD_FACTOR) {
    		MapEntry<K, V>[] arr = (MapEntry<K, V>[]) new MapEntry[backing.length * 2 + 1];
    		for (int i = 0; i < backing.length; i++) {
    			MapEntry<K, V> curr = backing[i];
        		while (curr != null) {
        			index = curr.getKey().hashCode() % arr.length;
        			addhelper(arr, index, curr);
        			curr = curr.getNext();
        		}  			
        	}
    		backing = arr;
    	}  		
    	index = key.hashCode() % backing.length;
    	addhelper(backing, index, entry);
    	size++;
    }
    	
    	
    private void addhelper(MapEntry<K, V>[] arr, int i, MapEntry<K, V> e) {
    	if (arr[i] != null) {
    		MapEntry<K, V> curr = arr[i];
    		while (curr.getNext() != null) {
    			curr = curr.getNext();
    		}
    		curr.setNext(e);
    	}
    	else arr[i] = e; 
    }
    	
    @Override
    public Set<MapEntry<K, V>> getEntrySet() {
    	Set<MapEntry<K, V>> set = new HashSet<MapEntry<K, V>>();
    	for (MapEntry<K, V> entry : backing) {
    		if (entry != null) {
    			set.add(entry);
    			MapEntry<K, V> curr = entry;
    			while (curr.getNext() != null) {
    				curr = curr.getNext();
    				set.add(curr);
    			}  			
    		} 		
    	}  		
    	return set;
    }

    @Override
    public MapEntry<K, V>[] getBackingArray() {
    	return backing;
    }

    @Override
    public int size() {
    	return size;
    }
}
